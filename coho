#!/usr/bin/env node
VERSION = process.argv[2]
var util           = require('util')
,   exec           = require('child_process').exec
,   fs			   = require('fs')
,   ios            = 'git://git.apache.org/incubator-cordova-ios.git'
,   blackberry     = 'git://git.apache.org/incubator-cordova-blackberry-webworks.git'
,   android        = 'git://git.apache.org/incubator-cordova-android.git'
,   windows        = 'git://git.apache.org/incubator-cordova-wp7.git'
,   webos          = 'git://git.apache.org/incubator-cordova-webos.git'
,   bada       	   = 'git://git.apache.org/incubator-cordova-bada.git'
,   docs      	   = 'git://git.apache.org/incubator-cordova-docs.git'
,	iosdir	       = 'incubator-cordova-ios'
,	blackberrydir  = 'incubator-cordova-blackberry-webworks'
,	androiddir	   = 'incubator-cordova-android'
,	windowsdir	   = 'incubator-cordova-wp7'
,	webosdir	   = 'incubator-cordova-webos'
,	badadir	       = 'incubator-cordova-bada'
,   docsdir        = 'incubator-cordova-docs'

var commandQueue = [],
    child;

function queueCommand(cmd) {
    commandQueue.push(cmd);
}

// Run through all queued commands in a synchronous manner.
// If there's an error it will stop executing commands.
// The callback parameter will fire once all commands have completed.
function executeCommands(callback) {
    var cmd = commandQueue.shift();
    if (cmd) {
		child = exec(cmd, function(err, stdout, stderr) {
        	if (err !== null) {
        		console.log('ERROR!' + err);
          		util.puts(stderr);
		  		executeCommands(callback);
        	} else {
          		util.puts(stdout);
          		executeCommands(callback);
        	}
		});
    	if (commandQueue.length === 0) {
    		// Attach the callback to the child since this is the last command.
    		child.on('exit', callback);
   		}
    } else {
    	console.log('All done');
    }
}

queueCommand("rm -rf temp && mkdir temp && cd temp && mkdir repositories && mkdir release");
queueCommand("cd temp/release && mkdir lib && cd lib && mkdir ios && mkdir android && mkdir blackberry && mkdir windows && mkdir webos && mkdir symbian && mkdir bada");

//ios
queueCommand("cd temp/repositories && git clone "+ios+" && cd "+iosdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+iosdir+" && make");
queueCommand("cd temp/repositories/"+iosdir+"/dist && cp -r PhoneGap-"+VERSION+".dmg ../../../release/lib/ios && cp -r PhoneGap-"+VERSION+".dmg.SHA1 ../../../release/lib/ios");

//blackberry
queueCommand("cd temp/repositories && git clone "+blackberry+" && cd "+blackberrydir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+blackberrydir+" && ant dist");
queueCommand("cd temp/repositories/"+blackberrydir+"/dist && cp -r ./* ../../../release/lib/blackberry");

//android
queueCommand("cd temp/repositories && git clone "+android+" && cd "+androiddir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+androiddir+" && cp LICENSE ../../release/license && cp VERSION ../../release/version && cp README.md ../../release/lib/android");
queueCommand("cd temp/repositories/"+androiddir+" && ./bin/create");
queueCommand("cd temp/repositories/"+androiddir+" && cp -rp example ../../release/lib/android/example");
queueCommand("cd temp/repositories/"+androiddir+"/example && cp libs/phonegap-"+VERSION+".jar ../../../release/lib/android/");
queueCommand("cd temp/repositories/"+androiddir+"/example && cp assets/www/phonegap-"+VERSION+".js ../../../release/lib/android/");

//windows phone
queueCommand("cd temp/repositories && git clone "+windows+" && cd "+windowsdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+windowsdir+" && cp -r ./* ../../release/lib/windows");

//webos
queueCommand("cd temp/repositories && git clone "+webos+" && cd "+webosdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+webosdir+" && cp -r ./* ../../release/lib/webos");

//bada
queueCommand("cd temp/repositories && git clone "+bada+" && cd "+badadir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+badadir+" && cp -r ./* ../../release/lib/bada");

//docs
queueCommand("cd temp/repositories && git clone "+docs+" && cd "+docsdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd temp/repositories/"+docsdir+" && ./bin/phonegap-docs && cp -r public ../../release/doc");

//symbian
fs.writeFile('depreciate.txt', 'PhoneGap-Symbian is being depreciated. You can find the last available code at https://github.com/callback/callback-symbian.', function (err) {
  if (err) throw err;
  console.log('It\'s saved!');
});
queueCommand("mv depreciate.txt temp/release/lib/symbian/depreciate.txt")

executeCommands(function(){
	exec("cd temp/release && git archive master -o phonegap-"+VERSION+".zip", function(e, stdout, stderr) {
	});
});
