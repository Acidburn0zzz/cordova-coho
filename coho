#!/usr/bin/env node
/*
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
	distributed with this work for additional information
   	regarding copyright ownership.  The ASF licenses this file
	to you under the Apache License, Version 2.0 (the
	"License"); you may not use this file except in compliance
	with the License.  You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied.  See the License for the
	specific language governing permissions and limitations
	under the License.
*/

PLATFORM = process.argv[2]
if (!PLATFORM) {
    PLATFORM = "all";
}
VERSION = process.argv[3]
var util           = require('util')
,   exec           = require('child_process').exec
,   fs			   = require('fs')
,   ios            = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-ios.git'
,   blackberry     = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-blackberry-webworks.git'
,   android        = 'https://github.com/imhotep/incubator-cordova-android.git'
,   windows        = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-wp7.git'
,   webos          = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-webos.git'
,   bada       	   = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-bada.git'
,   badaWac		   = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-bada-wac.git'
,   docs      	   = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-docs.git'
,	iosdir	       = 'incubator-cordova-ios'
,	blackberrydir  = 'incubator-cordova-blackberry-webworks'
,	androiddir	   = 'incubator-cordova-android'
,	windowsdir	   = 'incubator-cordova-wp7'
,	webosdir	   = 'incubator-cordova-webos'
,	badadir	       = 'incubator-cordova-bada'
,	badaWacdir	   = 'incubator-cordova-bada-wac'
,   docsdir        = 'incubator-cordova-docs'
,   tempRepoDir    = 'temp/repositories'
,   iosReleaseBinDir = ' ../../../release/bin/ios'
, blackberryReleaseBinDir = '../../../release/bin/blackberry'
, androidReleaseBinDir = '../../release/bin/android'
, androidReleaseLicense = '../../release/bin/android/LICENSE'
, androidReleaseVersion = '../../release/bin/android/VERSION'
, windowsReleaseBinDir = '../../release/bin/windows-phone'
, webosReleaseBinDir = '../../release/bin/webos'
, badaReleaseBinDir = '../../release/bin/bada'
, badaWacReleaseBinDir = '../../release/bin/badaWac'
, releaseDocDir = '../../release/doc'
, releaseBinDir = '../release/bin'
, releaseSrcDir = '../release/src/cordova-'+VERSION
, oldVer = process.argv[4];

var commandQueue = [],
    child;

var requiredSoftware = ["git", "jodoc", "markdown"];

function queueCommand(cmd) {
    commandQueue.push(cmd);
}

// Run through all queued commands in a synchronous manner.
// If there's an error it will stop executing commands.
// The callback parameter will fire once all commands have completed.
function executeCommands(callback) {
    var cmd = commandQueue.shift();
    if (cmd) {
		child = exec(cmd, function(err, stdout, stderr) {
        	if (err !== null) {
        		console.log('ERROR!' + err);
          		util.puts(stderr);
		  		executeCommands(callback);
        	} else {
          		util.puts(stdout);
          		executeCommands(callback);
        	}
		});
    	if (commandQueue.length === 0) {
    		// Attach the callback to the child since this is the last command.
    		child.on('exit', callback);
   		}
    } else {
    	console.log('All done');
    }
}

function checkSoftware() {
    var sw = requiredSoftware.shift();
    if (sw) {
		child = exec("which " + sw, function (error, stdout, stderr) {
            if (stdout === "") {
                console.log(sw + ' not found. Please install ' + sw + ' before continuing.');
                process.exit(0);
            }
            checkSoftware();
        });
    } else {
        console.log("All required software installed");
    }
}

checkSoftware();
queueCommand("rm -rf temp && mkdir temp && cd temp && mkdir repositories && mkdir release");
queueCommand("cd temp/release && mkdir bin && mkdir src && mkdir src/cordova-"+VERSION);

//ios
if (PLATFORM === "all" || PLATFORM === "ios") {
	queueCommand("cd temp/release/bin && mkdir ios");
    queueCommand("echo 'Building iOS'");
    queueCommand("cd " + tempRepoDir + " && git clone "+ios+" && cd "+iosdir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + iosdir + " " + releaseSrcDir);
	queueCommand("cd " + tempRepoDir + "/"+iosdir+" && make install-wkhtmltopdf");
    queueCommand("cd " + tempRepoDir + "/"+iosdir+" && make");
    queueCommand("cd " + tempRepoDir + "/"+iosdir+"/dist && cp -r Cordova-"+VERSION+".dmg " + iosReleaseBinDir + " && cp -r Cordova-"+VERSION+".dmg.SHA1 " + iosReleaseBinDir);
    queueCommand("cd " + tempRepoDir + "/"+iosdir+" && cp NOTICE ../../release/bin/ios");
	queueCommand("cd " + tempRepoDir + "/"+iosdir+" && cp LICENSE ../../release/bin/ios");
	queueCommand("cd " + tempRepoDir + "/"+iosdir+" && cp -r bin ../../release/bin/ios/");
}

//blackberry
if (PLATFORM === "all" || PLATFORM === "blackberry") {
	queueCommand("cd temp/release/bin && mkdir blackberry");
    queueCommand("echo 'Building BlackBerry'");
    queueCommand("cd " + tempRepoDir + " && git clone "+blackberry+" && cd "+blackberrydir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + blackberrydir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && ant dist");
    queueCommand("cd " + tempRepoDir + "/"+blackberrydir+"/dist && cp -r ./* " + blackberryReleaseBinDir);
    queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && cp NOTICE ../../release/bin/blackberry");
	queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && cp LICENSE ../../release/bin/blackberry");
	queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && cp -r bin ../../release/bin/blackberry/");
}

//android
if (PLATFORM === "all" || PLATFORM === "android") {
	queueCommand("cd temp/release/bin && mkdir android");
    queueCommand("echo 'Building Android'");
    //queueCommand("cd " + tempRepoDir + " && git clone "+android+" && cd "+androiddir+" && git fetch --tags && git checkout "+VERSION);
	queueCommand("cd " + tempRepoDir + " && git clone "+android+" && cd "+androiddir+" && git fetch --tags");
    queueCommand("cd " + tempRepoDir + " && cp -r " + androiddir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+androiddir+" && cp LICENSE " + androidReleaseLicense + " && cp VERSION " + androidReleaseVersion + " && cp README.md " + androidReleaseBinDir + " && cp NOTICE " + androidReleaseBinDir);
    queueCommand("cd " + tempRepoDir + "/"+androiddir+" && ant clean");
    queueCommand("cd " + tempRepoDir + "/"+androiddir+" && ./bin/create");
    queueCommand("cd " + tempRepoDir + "/"+androiddir+" && cp -rp example " + androidReleaseBinDir + "/example");
    queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp libs/cordova-"+VERSION+".jar ../" + androidReleaseBinDir);
    queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp assets/www/cordova-"+VERSION+".js ../" + androidReleaseBinDir);
    queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp -r res/xml ../" + androidReleaseBinDir);
	queueCommand("cd " + tempRepoDir + "/"+androiddir+" && cp -r bin ../../release/bin/android/");	
}

//windows phone
if (PLATFORM === "all" || PLATFORM === "wp") {
	queueCommand("cd temp/release/bin && mkdir windows-phone");
    queueCommand("echo 'Building Windows Phone'");
    queueCommand("cd " + tempRepoDir + " && git clone "+windows+" && cd "+windowsdir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + windowsdir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+windowsdir+" && cp -r ./* " + windowsReleaseBinDir);
}

//webos
if (PLATFORM === "all" || PLATFORM === "webos") {
	queueCommand("cd temp/release/bin && mkdir webos");
    queueCommand("echo 'Building WebOS'");
    queueCommand("cd " + tempRepoDir + " && git clone "+webos+" && cd "+webosdir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + webosdir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+webosdir+" && cp -r ./* " + webosReleaseBinDir);
}

//bada
if (PLATFORM === "all" || PLATFORM === "bada") {
	queueCommand("cd temp/release/bin && mkdir bada");
    queueCommand("echo 'Building Bada'");
    queueCommand("cd " + tempRepoDir + " && git clone "+bada+" && cd "+badadir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + badadir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+badadir+" && cp -r ./* " + badaReleaseBinDir);
}

//badaWac
if (PLATFORM === "all" || PLATFORM === "badaWac") {
	queueCommand("cd temp/release/bin && mkdir badaWac");
    queueCommand("echo 'Building BadaWac'");
    queueCommand("cd " + tempRepoDir + " && git clone "+badaWac+" && cd "+badaWacdir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + " && cp -r " + badaWacdir + " " + releaseSrcDir);
    queueCommand("cd " + tempRepoDir + "/"+badaWacdir+" && cp -r ./* " + badaWacReleaseBinDir);
}

//docs
if (PLATFORM === "all" || PLATFORM === "docs") {
    queueCommand("echo 'Building Documentation'");
    queueCommand("cd " + tempRepoDir + " && git clone "+docs+" && cd "+docsdir+" && git fetch --tags && git checkout "+VERSION);
    queueCommand("cd " + tempRepoDir + "/"+docsdir+" && ./bin/generate && cp -r public/en/"+VERSION+" " + releaseDocDir);
	queueCommand("cp bin/NOTICE temp/release/doc/cordova-"+VERSION+"-incubating-doc/NOTICE");
	queueCommand("cp bin/LICENSE temp/release/doc/cordova-"+VERSION+"-incubating-doc/LICENSE");
}

//symbian
fs.writeFile('deprecated.txt', 'Apache Cordova Symbian has been deprecated. The latest source code is available at: https://github.com/phonegap/phonegap-symbian.wrt/tree/a779600377f17511f2ff94beb0ab9e8a357860e1', function (err) {
  if (err) throw err;
});
queueCommand("cd temp/release/bin && mkdir symbian");
queueCommand("mv deprecated.txt temp/release/bin/symbian/deprecated.txt")

// keys into top level directory
queueCommand("echo 'Moving KEYS file to release'");
queueCommand("cp KEYS temp/release/KEYS")

// notice, license, readme, disclaimer file to be put into official release artifact
queueCommand("echo 'Moving notice, license, readme, and disclaimer files to release artifact'");
queueCommand("cp bin/README.md temp/release/src/cordova-"+VERSION+"/README.MD")
queueCommand("cp bin/NOTICE temp/release/src/cordova-"+VERSION+"/NOTICE");
queueCommand("cp bin/LICENSE temp/release/src/cordova-"+VERSION+"/LICENSE");
queueCommand("cp bin/DISCLAIMER temp/release/src/cordova-"+VERSION+"/DISCLAIMER");
queueCommand("cp bin/README.md temp/release/bin/cordova-"+VERSION+"-incubating-bin/README.MD")
queueCommand("cp bin/NOTICE temp/release/src/cordova-"+VERSION+"-incubating-bin/NOTICE");
queueCommand("cp bin/LICENSE temp/release/src/cordova-"+VERSION+"-incubating-bin/LICENSE");
queueCommand("cp bin/DISCLAIMER temp/release/src/cordova-"+VERSION+"-incubating-bin/DISCLAIMER");

if (oldVer != undefined){
	queueCommand("cd temp/release/ && touch changelog && echo 'ChangeLog' > changelog")
	queueCommand("echo 'ios' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+iosdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'blackberry' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'android' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+androiddir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'windows-phone' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+windowsdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'webos' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+webosdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'bada' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+badadir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'badaWac' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+badaWacdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
}

// zip and sign bin/src/doc folders
var cordovaBinZip = "cordova-"+VERSION+"-incubating-bin.zip";
var cordovaBinAsc = cordovaBinZip+".asc";
var cordovaBinMd5 = cordovaBinZip+".md5";
var cordovaBinSha = cordovaBinZip+".sha";

var cordovaDocZip = "cordova-"+VERSION+"-incubating-doc.zip";
var cordovaDocAsc = cordovaDocZip+".asc";
var cordovaDocMd5 = cordovaDocZip+".md5";
var cordovaDocSha = cordovaDocZip+".sha";

var cordovaSrcZip = "cordova-"+VERSION+"-incubating-src.zip";
var cordovaSrcAsc = cordovaSrcZip+".asc";
var cordovaSrcMd5 = cordovaSrcZip+".md5";
var cordovaSrcSha = cordovaSrcZip+".sha";

// remove git files before we zip
queueCommand("echo 'Cleaning up .git files from repositories before zipping em'");
queueCommand("cd temp/release/src/cordova-"+VERSION+" && find `pwd` -name .git -type d -print0 | xargs -0 rm -r");
queueCommand("cd temp/release/src/cordova-"+VERSION+" && find `pwd` -name .git* -type f -print0 | xargs -0 rm -r");
queueCommand("cd temp/ && find `pwd` -name .DS_Store | xargs rm -r");

queueCommand("echo 'Zipping and signing bin'");
queueCommand("cd temp/release/bin && zip -rq "+ cordovaBinZip +" * && gpg --armor --output "+cordovaBinAsc+" --detach-sig "+cordovaBinZip+" && gpg --print-md MD5 "+cordovaBinMd5+" > " + cordovaBinMd5 +" && gpg --print-md SHA512 " + cordovaBinZip + " > " + cordovaBinSha);

if (PLATFORM === "all" || PLATFORM === "docs") {
	queueCommand("echo 'Zipping and signing doc'");
	queueCommand("cd temp/release/doc && zip -rq "+ cordovaDocZip +" * && gpg --armor --output "+cordovaDocAsc+" --detach-sig "+cordovaDocZip+" && gpg --print-md MD5 "+cordovaDocZip+" > " + cordovaDocMd5 +" && gpg --print-md SHA512 " + cordovaDocZip + " > " + cordovaDocSha);
}

queueCommand("echo 'Zipping and signing src'");
queueCommand("cd temp/release/src && zip -rq "+ cordovaSrcZip +" * && gpg --armor --output "+cordovaSrcAsc+" --detach-sig "+cordovaSrcZip+" && gpg --print-md MD5 "+cordovaSrcZip+" > " + cordovaSrcMd5 +" && gpg --print-md SHA512 " + cordovaSrcZip + " > " + cordovaSrcSha);

// clean up
queueCommand("echo 'Final clean up'");
queueCommand("cd temp/release/bin && ls | grep -v "+cordovaBinZip+" | xargs rm -r");
if (PLATFORM === "all" || PLATFORM === "docs") {
	queueCommand("cd temp/release/doc && ls | grep -v "+cordovaDocZip+" | xargs rm -r");
}
queueCommand("cd temp/release/src && ls | grep -v "+cordovaSrcZip+" | xargs rm -r");
executeCommands(function(){
	exec("say DONE", function(e, stdout, stderr) {
	});
});
