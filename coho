#!/usr/bin/env node
/*
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
	distributed with this work for additional information
   	regarding copyright ownership.  The ASF licenses this file
	to you under the Apache License, Version 2.0 (the
	"License"); you may not use this file except in compliance
	with the License.  You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied.  See the License for the
	specific language governing permissions and limitations
	under the License.
*/
PLATFORM = process.argv[2]
if (!PLATFORM) {
    PLATFORM = "all";
}
VERSION = process.argv[3]
var util           = require('util')
,   exec           = require('child_process').exec
,   fs             = require('fs')
,   shjs           = require('shelljs')
,   tempRepoDir    = 'temp/repositories'
,   releaseSrcDir  = '../../release/src/cordova-'+VERSION
,   repoCount      = 15
,   tracker        = 0
,   oldVer         = process.argv[4];

var cordovaSrcZip = "cordova-"+VERSION+"-src.zip";
var cordovaSrcAsc = cordovaSrcZip+".asc";
var cordovaSrcMd5 = cordovaSrcZip+".md5";
var cordovaSrcSha = cordovaSrcZip+".sha";

shjs.rm('-rf', 'temp')
shjs.mkdir('-p', ['temp/repositories','temp/release/src/cordova-'+VERSION])

var platformDict = {
  "iOS" : ['https://git-wip-us.apache.org/repos/asf/incubator-cordova-ios.git','incubator-cordova-ios'],
  "Android":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-android.git', 'incubator-cordova-android'],
  "BlackBerry":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-blackberry-webworks.git', 'incubator-cordova-blackberry-webworks'],
  "Windows":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-windows.git', 'incubator-cordova-windows'],
  "Windows Phone":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-wp7.git', 'incubator-cordova-wp7'],
  "Bada":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-bada.git', 'incubator-cordova-bada'],
  "BadaWac":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-bada-wac.git', 'incubator-cordova-bada-wac'],
  "WebOS":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-webos.git', 'incubator-cordova-webos'],
  "Tizen":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-tizen.git', 'incubator-cordova-tizen'],
  "QT":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-qt.git', 'incubator-cordova-qt'],
  "OSX":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-mac.git', 'incubator-cordova-mac'],
  "Docs":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-docs.git', 'incubator-cordova-docs'],
  "MobileSpec":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-mobile-spec.git', 'incubator-cordova-mobile-spec'],
  "CordovaJS":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-js.git', 'incubator-cordova-js'],
  "Hello World App":['https://git-wip-us.apache.org/repos/asf/incubator-cordova-app-hello-world.git', 'incubator-cordova-app-hello-world']
};


shjs.cd(tempRepoDir)
shjs.echo(shjs.ls('.'))

//keys into top level directory
shjs.echo('Moving KEYS file to release');
shjs.cp('../../KEYS', '../release/KEYS');

// notice, license, readme, disclaimer file to be put into official release artifact
shjs.echo('Moving notice, license, readme, and disclaimer files to release artifact');
shjs.cp('../../bin/*', '../release/src/cordova-'+VERSION);


//git clone & checkout version
function prep(){
    tracker = 0;
    for(key in platformDict){
        shjs.echo('Cloning ' + key);
        shjs.exec("git clone "+platformDict[key][0]+" && cd "+platformDict[key][1]+" && git fetch --tags && git checkout "+VERSION, {async:true, silent:true}, function(e, stdout, stderr) {
            tracker +=1;
            if (tracker == repoCount){
                repoZip();
            }
    	});   
    }
}

//zip repos into release directory
function repoZip(){
    tracker = 0;
    for(key in platformDict){
        shjs.exec("cd " + platformDict[key][1] + " && git archive --format zip -o " + releaseSrcDir+"/"+platformDict[key][1]+".zip "+VERSION, {async:true}, function(){
            tracker += 1;
            if (tracker == repoCount){
                changelog();
            }
        });
    }
}

//generates the changelog
function changelog(){
    //keeps track of directoires of created changelogs
    var tempArray = []
    if (oldVer != undefined){
        exec('cd ../release/src/cordova-'+VERSION+' && echo "CHANGELOG" > changelog');
        tempArray.push('../release/src/cordova-'+VERSION+'/changelog');
        tracker = 0;
        for(key in platformDict){
            tempArray.push(platformDict[key][1]+'/changelog');
            exec("cd "+platformDict[key][1]+" && echo '\n"+key+" \n---\n' > changelog && git log --format='%h %s' "+oldVer+".."+VERSION+" >> changelog", function(){
                tracker +=1
                if (tracker == repoCount){
                    //concatenate all changelogs to one changelog 
                    shjs.cat(tempArray).to('../release/src/cordova-'+VERSION+'/changelog');
                    signZip();
                }
            });
        }
    }
}   

// zip and sign cordova release folder
function signZip(){
    shjs.echo('Zipping and signing src');
    shjs.exec("cd ../release/src && zip -rq "+ cordovaSrcZip +" * && gpg --armor --output "+cordovaSrcAsc+" --detach-sig "+cordovaSrcZip+" && gpg --print-md MD5 "+cordovaSrcZip+" > " + cordovaSrcMd5 +" && gpg --print-md SHA512 " + cordovaSrcZip + " > " + cordovaSrcSha, {async:true}, function(){
        shjs.echo("Created temp/release/src/"+cordovaSrcZip+" with corresponding asc, md5, and sha files.");
    });   
}

prep();
